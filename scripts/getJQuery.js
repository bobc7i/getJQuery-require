// Generated by CoffeeScript 1.3.3
(function() {

  define(function() {
    var errorMsg, loadPlugins, storePlugins, versionedPlugins;
    versionedPlugins = {};
    errorMsg = function(version) {
      return "jquery-" + version + " could not be loaded. getJQuery! loader expects a semantic version number";
    };
    storePlugins = function(plugins, name) {
      var i, len, _results;
      if (!versionedPlugins[name]) {
        versionedPlugins[name] = [];
      }
      i = 0;
      len = plugins.length;
      _results = [];
      while (i < len) {
        versionedPlugins[name].push("text!" + (plugins[i].trim()) + ".js");
        _results.push(i++);
      }
      return _results;
    };
    loadPlugins = function(req, $, plugins, load) {
      var jQuery;
      jQuery = $;
      req(plugins, function() {
        var i, len, pluginText;
        i = 0;
        len = arguments.length;
        while (i < len) {
          pluginText = arguments[i];
          eval(pluginText);
          i++;
        }
        return load($);
      });
      return plugins = [];
    };
    return {
      normalize: function(name, normalize) {
        var plgnRe, plugins, segs, version;
        plugins = [];
        plgnRe = /^([0-9]*\.[0-9]*\.[0-9]*)(\[(.+?)\])?$/g;
        segs = plgnRe.exec(name);
        if (!segs) {
          return normalize(name);
        }
        version = segs[1];
        if (isNaN(parseFloat(version))) {
          throw errorMsg(version);
        }
        name = "jquery-" + version;
        if (segs[3]) {
          storePlugins(segs[3].split(","), name);
        }
        return normalize(name);
      },
      load: function(name, req, load, config) {
        return req([name], function() {
          var $L;
          $L = jQuery.noConflict(true).sub();
          if (versionedPlugins[name] && versionedPlugins[name].length) {
            return loadPlugins(req, $L, versionedPlugins[name], load);
          } else {
            return load($L);
          }
        });
      }
    };
  });

}).call(this);
