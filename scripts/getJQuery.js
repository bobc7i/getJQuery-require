// Generated by CoffeeScript 1.3.3
(function() {

  define([], function() {
    var Dollar, errorMsg, loadPlugins;
    Dollar = function($, plugins) {
      this.$ = $;
      this.plugins = plugins != null ? plugins : [];
    };
    errorMsg = function(version) {
      return "jquery-" + version + " could not be loaded. getJQuery! loader expects a semantic version number";
    };
    loadPlugins = function(plugins, the$, req, onLoad) {
      var $, jQuery;
      jQuery = $ = the$;
      return req(plugins, function() {
        var i, pluginText, _i, _ref;
        for (i = _i = 0, _ref = arguments.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          pluginText = arguments[i];
          eval(pluginText);
        }
        return typeof onLoad === "function" ? onLoad(the$) : void 0;
      });
    };
    return {
      load: function(name, req, onLoad, config) {
        var dollar, plugin, pluginRe, plugins, version, versionRe, _i, _len, _ref, _ref1;
        if (config.isBuild) {
          return onLoad();
        } else {
          if ((_ref = config.dollars) == null) {
            config.dollars = {};
          }
          versionRe = /([0-9]*\.[0-9]*\.[0-9]*)/g;
          pluginRe = /\[([^\]]*)\]/;
          try {
            version = name.match(versionRe)[0];
          } catch (e) {
            throw errorMsg(name);
          }
          plugins = pluginRe.exec(name) ? pluginRe.exec(name)[1].split(',') : [];
          name = "jquery-" + version;
          if ((_ref1 = config.shim) == null) {
            config.shim = {};
          }
          config.shim[name] = {
            exports: '$',
            init: function() {
              return window.$.noConflict(true).sub();
            }
          };
          dollar = new Dollar(null, plugins);
          if (plugins.length) {
            plugins = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = plugins.length; _i < _len; _i++) {
                plugin = plugins[_i];
                _results.push("text!" + (plugin.trim()) + ".js");
              }
              return _results;
            })();
            for (_i = 0, _len = plugins.length; _i < _len; _i++) {
              plugin = plugins[_i];
              config.shim[plugin] = [name];
            }
            return require(config, [name], function(the$) {
              return loadPlugins(plugins, the$, req, onLoad);
            });
          } else {
            return require(config, [name], function(the$) {
              return onLoad(the$);
            });
          }
        }
      }
    };
  });

}).call(this);
